{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ChenKaiLiuG/12th_grade_python/blob/main/%E9%AB%98%E4%B8%89%E8%B3%87%E8%A8%8A.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# input/print\n",
        "\n",
        "print(type(a)) --> 檢查資料類型\n",
        "\n",
        "input()屬於字串\n",
        "\n",
        "所以int/float(input())才是數字\n",
        "\n",
        "a+b+c會變成abc，而非數值\n",
        "\n",
        "..........\n",
        "\n",
        "取位數:\"blablabla{0:m.nf},blablabla{1:m.nf}\" .format(a,b)\n",
        "\n",
        "a,b屬於數字\n",
        "\n",
        "{0}{1}用於對應a,b\n",
        "\n",
        "m.nf m=占用m個位置，n=取小數點下n位，f=float\n",
        "\n",
        ".........\n",
        "\n",
        "取位數:f\"blablabla{a:m.nf},blablabla{b:m.nf}\"\n",
        "\n",
        ".........\n",
        "sep=\"n\" --> 以n填充所有字串、數據的間隔，需加在最後面\n",
        "\n",
        "sep=\" \" --> 以空白間隔\n",
        "\n",
        "Ex:\n",
        "\n",
        "print(\"blabla\",\"bla\",sep=\" \")\n",
        "\n",
        "輸出:blabla bla\n",
        "\n",
        "sep=\"\" --> 直接連著 不間隔\n",
        "\n",
        "Ex:\n",
        "\n",
        "print(\"blabla\",\"bla\",sep=\"\")\n",
        "\n",
        "輸出:blablabla"
      ],
      "metadata": {
        "id": "V91NKMEsZYI9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=input()\n",
        "print(type(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i9Xw3ojN70w9",
        "outputId": "b278d9a0-4d34-4944-c829-6173e5a30aa7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a\n",
            "<class 'str'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "0mKEWf7mNDSN",
        "outputId": "eb7b5a64-7eb0-4bcd-cb29-17869fd1d090"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1\n",
            "2\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-4b0f5c1a7cbe>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ],
      "source": [
        "a=int(input())\n",
        "b=int(input())\n",
        "c=int(input())\n",
        "d=int(input())\n",
        "e=int(input())\n",
        "\n",
        "sum=a+b+c+d+e\n",
        "avg=sum/5\n",
        "print(\"sum:\",sum)\n",
        "print(f\"avg:{avg:0.2f}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r=float(input())\n",
        "h=float(input())\n",
        "\n",
        "v=r*r*3.1416*h\n",
        "\n",
        "print('{0:0.4f}'.format(v))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C6pUJBM9SFqr",
        "outputId": "791c8c6e-da44-4b90-9c03-3412cbb6597a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "5\n",
            "1570.7500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# str.split\n",
        "\n",
        "**c++**\n",
        "\n",
        "cin>>a>>b>>c\n",
        "\n",
        "**py**\n",
        "\n",
        "a,b,c=input().split()\n",
        "\n",
        "**或**\n",
        "\n",
        "str1=input() **-->** 先把輸入的字串存到字串變數str1裡\n",
        "\n",
        "a,b,c=str1.split() **-->** 再用split()去切割str1字串\n",
        "\n",
        "a = int(a)\n",
        "\n",
        "b = int(b)\n",
        "\n",
        "c = int(c) **-->** 依此類推逐一取得輸入值"
      ],
      "metadata": {
        "id": "dLvW92gXdEDL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name,a,b,c,d,e = input().split()\n",
        "\n",
        "a=float(a)\n",
        "b=float(b)\n",
        "c=float(c)\n",
        "d=float(d)\n",
        "e=float(e)\n",
        "\n",
        "avg=(a+b+c+d+e)/5\n",
        "\n",
        "print(\"{0}: {1:0.4f}\".format(name,avg))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_YJd0UWwdErt",
        "outputId": "0362baf6-a71c-48a9-8d3c-d64fd4150395"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vanessa 99 88 88.33 99.12 77\n",
            "Vanessa: 90.2900\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# math\n",
        "\n",
        "\"+ - * / \"\n",
        "\n",
        "//=商\n",
        "\n",
        "%=餘\n",
        "\n",
        "**=次方\n",
        "\n",
        "..........\n",
        "\n",
        "import math\n",
        "\n",
        "math.sqrt() --> 開根號\n",
        "\n",
        "或\n",
        "\n",
        "a=a**0.5"
      ],
      "metadata": {
        "id": "Yp3XeU_3a-_o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "a=float(input())\n",
        "b=float(input())\n",
        "c=float(input())\n",
        "\n",
        "s=(a+b+c)/2\n",
        "a=s-a\n",
        "b=s-b\n",
        "c=s-c\n",
        "\n",
        "p=math.sqrt(s*a*b*c)\n",
        "\n",
        "print(\"{0:0.2f}\".format(p))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nOArfU3t4rwY",
        "outputId": "392d676a-1039-462a-90a5-ac871f56910c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "4\n",
            "5\n",
            "6.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "#ax2+bx+c\n",
        "\n",
        "a=float(input())\n",
        "b=float(input())\n",
        "c=float(input())\n",
        "\n",
        "x1=(b*-1+math.sqrt(b*b-4*a*c))/(a*2)\n",
        "x2=(b*-1-math.sqrt(b*b-4*a*c))/(a*2)\n",
        "\n",
        "print(\"{0:0.2f}\".format(x1))\n",
        "print(\"{0:0.2f}\".format(x2))\n"
      ],
      "metadata": {
        "id": "IFLHx_R4a_Xc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "#h=1/2gt2\n",
        "#2h/g=t2\n",
        "\n",
        "h=float(input())\n",
        "t=math.sqrt(h*2/9.8)\n",
        "\n",
        "print(\"{0:0.1f}\".format(t))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mBbqGYRqV-xp",
        "outputId": "26988575-9d41-4f61-8041-409bbd6352ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20\n",
            "2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# try&except\n",
        "\n",
        "try: 指嘗試下面的程式碼，如果不行，執行except\n",
        "\n",
        "except: try失敗時使用，通常用做錯誤訊息\n",
        "\n",
        ".........\n",
        "\n",
        "ValueError --> 不為數值\n",
        "\n",
        "EOFError --> 無資料\n",
        "\n",
        "註：不一定需要列入錯誤訊息種類於程式中"
      ],
      "metadata": {
        "id": "tILZbOzDfpK9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "instr = input() #輸入a9\n",
        "\n",
        "try:\n",
        "  score = float(instr)\n",
        "  print(score)\n",
        "except:\n",
        "  print(\"Error\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9TtIuPx4fpbP",
        "outputId": "f7ae51ff-2446-49ff-bb7f-bf70274258cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a1\n",
            "Error\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name,a,b = input().split()\n",
        "\n",
        "flag=0\n",
        "\n",
        "try:\n",
        "    a=float(a)\n",
        "except ValueError:\n",
        "    flag =1\n",
        "\n",
        "try:\n",
        "    b=float(b)\n",
        "except ValueError:\n",
        "    flag =2\n",
        "\n",
        "\n",
        "\n",
        "if(flag==1):\n",
        "    print(\"Score 1 error!!\")\n",
        "\n",
        "elif(flag==2):\n",
        "    print(\"Score 2 error!!\")\n",
        "\n",
        "else:\n",
        "    avg=(a+b)/2\n",
        "    print(\"{0}: {1:0.4f}\".format(name,avg))"
      ],
      "metadata": {
        "id": "3mbaP4QB0J8A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84840945-7efb-4d90-f9d5-73d5a8e683f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X 90 99\n",
            "X: 94.5000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# upper/lower&取第n字元\n",
        "\n",
        "**str**.upper()轉大寫\n",
        "\n",
        "**str**.lower()轉小寫\n",
        "\n",
        "..........\n",
        "\n",
        "str1[0] --> str1索引值0的位置 => 第一個字元\n",
        "\n",
        "str1[-1] --> 最後一個字元\n",
        "\n",
        "str1[m:n] --> str1索引值m - n的位置 => 第m+1 - n+1個字元\n"
      ],
      "metadata": {
        "id": "K0GplKAD1GNm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str1=input()\n",
        "\n",
        "print(str.upper(str1[0]),str.lower(str1[1:]),sep=\"\")"
      ],
      "metadata": {
        "id": "G9NtITGX1G13",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "732a62ae-de5d-4c68-dec6-3084f7183c2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hygguHUJHTCTg.\n",
            "Hygguhujhtctg.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# str.replace\n",
        "\n",
        "stry=**strx**.replace(old,new[,n]) --> 將old替換成new，最多替換n次\n",
        "\n",
        "**不建議回寫到原字串**"
      ],
      "metadata": {
        "id": "H8hskZ3HC2lN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str1=input()\n",
        "\n",
        "str1=str.lower(str1)\n",
        "\n",
        "str2=str1.replace(\"she \",\"I \").replace(\"he \",\"I \").replace(\"does \",\"did \").replace(\"do \",\"did \").replace(\"have \",\"had \").replace(\"has \",\"had \").replace(\".\",\"!\")\n",
        "\n",
        "print(str.upper(str2[0]),str.lower(str2[1:]),sep=\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rESLp26BHACN",
        "outputId": "865e301e-1866-4b8b-d6b6-e307cf6516b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "She has a pet pig.\n",
            "I had a pet pig!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str1=input()\n",
        "\n",
        "str2=str1.replace(\"sqrt(\",\"$\\sqrt{\").replace(\")\",\"}\")\n",
        "\n",
        "print(str.upper(str2[0]),str.lower(str2[1:]),sep=\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l2yjgn_5DEkH",
        "outputId": "398ae216-770e-4162-d49a-8dfb077566ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the value of sqrt(16) is: 4.\n",
            "The value of $\\sqrt{16} is: 4.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str1=input()\n",
        "\n",
        "a1=int(str1[0])\n",
        "a2=int(str1[1])\n",
        "a3=int(str1[2])\n",
        "a4=int(str1[3])\n",
        "a5=int(str1[4])\n",
        "a6=int(str1[5])\n",
        "a7=int(str1[6])\n",
        "a8=int(str1[7])\n",
        "\n",
        "m=a1*(2**7)\n",
        "n=a2*(2**6)\n",
        "o=a3*(2**5)\n",
        "p=a4*(2**4)\n",
        "q=a5*(2**3)\n",
        "r=a6*(2**2)\n",
        "s=a7*(2**1)\n",
        "t=a8\n",
        "\n",
        "sum=m+n+o+p+q+r+s+t\n",
        "print(\"The value of binary \",str1,\" in decimal is: \",sum,\".\",sep=\"\")"
      ],
      "metadata": {
        "id": "2bucigRU66Qt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e2027e1-98f0-46ce-e6e0-f2ac68ac9f56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11111111\n",
            "The value of binary 11111111 in decimal is: 255.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# if/else\n",
        "\n",
        "if condition 1:\n",
        "\n",
        "  statement a\n",
        "\n",
        "  ...\n",
        "\n",
        "elif condition 2:\n",
        "\n",
        "  statement b\n",
        "\n",
        "  ...\n",
        "\n",
        "elif condition 3:\n",
        "\n",
        "  statement c\n",
        "\n",
        "  ...\n",
        "\n",
        "else:\n",
        "\n",
        "  statement N\n",
        "\n",
        "**縮排等請看編輯頁面**"
      ],
      "metadata": {
        "id": "IDZ0YmhFIzrO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=float(input())\n",
        "\n",
        "if a>=0:\n",
        "\n",
        "  if a==0:\n",
        "    print(\"Z\")\n",
        "\n",
        "  elif a%2==0:\n",
        "    print(\"E\")\n",
        "\n",
        "  else:\n",
        "    print(\"O\")\n",
        "\n",
        "else:\n",
        "  print(\"M\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e_TAlB3qSUrX",
        "outputId": "68701fa1-c4c2-46c6-f9c5-61c987d79ea5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "76\n",
            "E\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=float(input())\n",
        "b=float(input())\n",
        "c=float(input())\n",
        "\n",
        "if a>100 or a<0:\n",
        "  print(\"BS\")\n",
        "\n",
        "elif b>100 or b<0:\n",
        "  print(\"BS\")\n",
        "\n",
        "elif c>100 or c<0:\n",
        "  print(\"BS\")\n",
        "\n",
        "else:\n",
        "  avg=(a+b+c)/3\n",
        "\n",
        "  if avg>=60:\n",
        "    print(\"PASS\")\n",
        "\n",
        "  else:\n",
        "    print(\"FAIL\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lh6tqeo3dJUX",
        "outputId": "41cba1f1-671b-4e30-86c2-03804fbce95c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-1\n",
            "40\n",
            "38\n",
            "BS\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=float(input())\n",
        "b=float(input())\n",
        "c=float(input())\n",
        "\n",
        "if a<60:\n",
        "  a=a*1.25\n",
        "else:\n",
        "  a=a\n",
        "\n",
        "if b<60:\n",
        "  b=b*1.25\n",
        "else:\n",
        "  b=b\n",
        "\n",
        "if c<60:\n",
        "  c=c*1.25\n",
        "else:\n",
        "\n",
        "  c=c\n",
        "\n",
        "avg=(a+b+c)/3\n",
        "if avg>=60:\n",
        "  print(\"Hmm\")\n",
        "\n",
        "else:\n",
        "  print(\"PleaseGoToDieOneDie\")"
      ],
      "metadata": {
        "id": "0jD8C8RXZ3Lk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a=int(input())\n",
        "\n",
        "if a>10000:\n",
        "  print(\"Sleeping in school\")\n",
        "\n",
        "elif a<=1500:\n",
        "  m=70\n",
        "\n",
        "  print(m)\n",
        "else:\n",
        "  m=int((a-1500)/500)\n",
        "  m=m*5+70\n",
        "\n",
        "  if a%500!=0:\n",
        "    m+=5\n",
        "\n",
        "  print(m)\n",
        "  print(\"{0:0.0f}\".format(m))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PuniOHGzBBsn",
        "outputId": "d39ce3f9-c6e3-4065-851e-fb5c45873689"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2400\n",
            "80\n",
            "80\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 頭尾內容匹配檢查\n",
        "\n",
        "str1.start**s**with() --> 檢查開頭匹配\n",
        "\n",
        "str1.end**s**with() --> 檢查結尾匹配\n",
        "\n",
        "**注意字串是第三人稱 動詞start/end要+s**"
      ],
      "metadata": {
        "id": "C5nhRR5mcdgb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str1=input()\n",
        "\n",
        "flaga=0\n",
        "flagb=0\n",
        "\n",
        "flag=0\n",
        "\n",
        "if str1.startswith(\"https://\") and str1.endswith(\"tn.edu.tw\"):\n",
        "  flaga=1\n",
        "\n",
        "if str1.startswith(\"http://\") and str1.endswith(\"tnfsh.tn.edu.tw\"):\n",
        "  flagb=1\n",
        "\n",
        "if flaga==1:\n",
        "  flag=1\n",
        "elif flagb==1:\n",
        "  flag=1\n",
        "\n",
        "if flag==1:\n",
        "  print(\"OK!!\")\n",
        "else:\n",
        "  print(\"Invalid web site URL!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YiQgpcevccsH",
        "outputId": "882cf1a5-1a43-4400-c909-ba4d65fb08f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "http://lib.tnfsh.tn.edu.tw\n",
            "OK!!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# For迴圈\n",
        "\n",
        "for x in (a,b,c)\n",
        "\n",
        "x --> 迴圈內用以操作的變數\n",
        "\n",
        "(a,b,c) --> 依序寫到x（也可輸入list、range函數）\n",
        "\n",
        "函數 range(m,n)\n",
        "\n",
        "m --> x的起始數值(未輸入時預設為0)\n",
        "\n",
        "n --> x到此終止\n",
        "\n",
        "**x實際運作範圍: m <= x < n (故有時所求為n+1)**"
      ],
      "metadata": {
        "id": "62-xTKNMI1En"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=int(input())\n",
        "\n",
        "sum=0\n",
        "\n",
        "for x in range(1,a+1):\n",
        "  sum=sum+1/x\n",
        "\n",
        "print(\"{0:0.4f}\".format(sum))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8dULKWWlI7gP",
        "outputId": "03e54b1c-aded-4b9b-baea-7ab1cf3175dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "1.5000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=int(input())\n",
        "\n",
        "sum=0\n",
        "\n",
        "for y in range(2,x):\n",
        "  if x%y==0:\n",
        "    sum=sum+y\n",
        "\n",
        "  else:\n",
        "    sum=sum\n",
        "\n",
        "if sum==0:\n",
        "  print(\"XD\")\n",
        "\n",
        "else:\n",
        "  print(sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QYXUBKcVLqGh",
        "outputId": "46db7924-0d49-4f79-b042-5ed7ec477d3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "32\n",
            "30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=int(input())\n",
        "b=int(input())\n",
        "n=int(input())\n",
        "sum=0\n",
        "\n",
        "for i in range(n):\n",
        "  a+=3\n",
        "  b+=2\n",
        "  h=a*b\n",
        "  sum+=h\n",
        "\n",
        "print(sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "APj4r2bIvvgI",
        "outputId": "ba7328e4-6489-4fb2-fc8e-9907aa55ae9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "7\n",
            "20\n",
            "24430\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input())\n",
        "\n",
        "for i in range(n):\n",
        "    k=input()\n",
        "\n",
        "    if k==\"0 1 0 1\":\n",
        "        print(\"A\",end=\"\")\n",
        "    elif k==\"0 1 1 1\":\n",
        "        print(\"B\",end=\"\")\n",
        "    elif k==\"0 0 1 0\":\n",
        "        print(\"C\",end=\"\")\n",
        "    elif k==\"1 1 0 1\":\n",
        "        print(\"D\",end=\"\")\n",
        "    elif k==\"1 0 0 0\":\n",
        "        print(\"E\",end=\"\")\n",
        "    else:\n",
        "        print(\"F\",end=\"\")\n",
        "\n",
        "#6:49"
      ],
      "metadata": {
        "id": "AwwO0kkwvr7q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80fd0d40-b123-4e25-96f3-bb206aed8abd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "1 0 0 0\n",
            "E\n",
            "0 1 1 1\n",
            "B\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# break&continue"
      ],
      "metadata": {
        "id": "XTsXj3kvONVb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# No number is perfect with break\n",
        "x=int(input())\n",
        "y=int(input())\n",
        "flag=0\n",
        "\n",
        "for i in range(x,y+1):\n",
        "  sum=1\n",
        "\n",
        "  for j in range(2,i):\n",
        "    if i%j==0:\n",
        "      sum+=j\n",
        "\n",
        "  if sum==i and i!=1:\n",
        "    print(sum)\n",
        "    flag=1\n",
        "    break\n",
        "\n",
        "if flag=0:\n",
        "  print(\"No number is perfect\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8iP7MGx4S3al",
        "outputId": "fe63b96c-0077-4399-8323-ea44a8317c8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "10\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# No number is perfect with continue\n",
        "a=int(input())\n",
        "b=int(input())\n",
        "ans=-1\n",
        "\n",
        "\n",
        "for x in range(a,b+1):\n",
        "  sum=0\n",
        "  if x==1:\n",
        "    continue\n",
        "\n",
        "  for y in range(2,x):\n",
        "    if x%y==0:\n",
        "      sum=sum+y\n",
        "\n",
        "\n",
        "  if sum==x-1:\n",
        "    ans=x\n",
        "    break\n",
        "\n",
        "\n",
        "if ans==-1:\n",
        "  print(\"No number is perfect\")\n",
        "else:\n",
        "  print(ans)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-qETnOcWOSKi",
        "outputId": "8ee3141c-1c11-44e9-979d-85a5db9b7b3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "10\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l=list(map(int,input().split()))\n",
        "n=len(l)\n",
        "x=0\n",
        "\n",
        "for i in range(n):\n",
        "  c=0\n",
        "  flag=0\n",
        "\n",
        "  for j in range(n):\n",
        "    if l[i]==l[j]:\n",
        "      c+=1\n",
        "\n",
        "  if c%2!=0:\n",
        "    print(l[i])\n",
        "    flag=1\n",
        "    break\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hxqoWuc3ZLYy",
        "outputId": "406b49de-5fd3-4e9d-b722-1ade7bf509d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 3 4 1 2 1 2\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 一維list\n",
        "\n",
        "list1 = [1,2, ... ,n (共n個元素)]\n",
        "\n",
        "list2 = list(1,2, ... ,n) （第一個list1是名詞，第二個list是動詞）\n",
        "\n",
        "list1和list2等價\n",
        "同理：\n",
        "\n",
        "list1 = [] --> 空陣列\n",
        "\n",
        "list2 = list() --> 空陣列\n",
        "\n",
        "..........\n",
        "\n",
        "listb = lista --> b和a綁定，改動a同時改動b\n",
        "\n",
        "listb = lista.copy() --> a單獨複製出b，彼此不連動\n",
        "\n",
        "\n",
        "..........\n",
        "\n",
        "n=len(list1) --> 取得list內元素數（無論內部資料類型）\n",
        "\n",
        "map(x,a) --> 逐一轉換a陣列內的元素至資料型態x\n",
        "\n",
        "list1.sort() --> 由小到大排序陣列內元素\n",
        "(在()內加入reverse=True則由大到小)\n",
        "\n",
        "..........\n",
        "\n",
        "list1.append(x) --> 在list1的最末項後加入\"x\"\n",
        "\n"
      ],
      "metadata": {
        "id": "wWWNCcN455GG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list1 = input().split() #系統會自動辨識，不需[]\n",
        "sum=0\n",
        "sum2=0\n",
        "n=len(list1)\n",
        "\n",
        "for x in list1:\n",
        "  x=float(x) #輸入進來還是字串，x int成數值\n",
        "  sum=sum+x\n",
        "  sum2=sum2+(x**2)\n",
        "\n",
        "avg=sum/n\n",
        "avg2=sum2/n\n",
        "ans=((avg2)-(avg**2))**0.5\n",
        "print(\"{0:0.3f}\".format(ans))"
      ],
      "metadata": {
        "id": "UcQgp5kN55hH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5ac61a3-a5d7-427a-c6b3-16883fcc4f3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28 18 31 81 75    39 63 85   76 90 24 88 99 24 27 64 97  77 84 86\n",
            "27.642\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input())\n",
        "l=list(map(int,input().split())) #如何轉換成數值\n",
        "\n",
        "print(l)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ssTxA3oxKZgp",
        "outputId": "975f0761-2c9c-4172-f661-8ae24788330d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n",
            "1 4 2 2 3 5 3 4\n",
            "[1, 4, 2, 2, 3, 5, 3, 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list1=input().split()\n",
        "list2=list(map(int,list1))\n",
        "list2.sort(reverse=True)\n",
        "a=0\n",
        "b=0\n",
        "\n",
        "if list2[-1]>=60:\n",
        "  for x in list2:\n",
        "    print(x,end=\" \")\n",
        "  print(\"\\n\",\"best case\",sep=\"\")\n",
        "  print(list2[-1])\n",
        "\n",
        "elif list2[0]<60:\n",
        "  for x in list2:\n",
        "    print(x,end=\" \")\n",
        "  print(\"\\n\",\"worst case\",sep=\"\")\n",
        "  print(list2[0])\n",
        "\n",
        "else:\n",
        "  for x in list2:\n",
        "    if x<60:\n",
        "      b=x\n",
        "      break\n",
        "\n",
        "    a=x\n",
        "\n",
        "  for x in list2:\n",
        "    print(x,end=\" \")\n",
        "  print(\"\\n\",a,sep=\"\")\n",
        "  print(b)"
      ],
      "metadata": {
        "id": "x72sB9O4vZ63",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0173a20e-e396-4642-e6d8-e1a7bd0de57b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 55 66 100\n",
            "100 66 55 10 \n",
            "66\n",
            "55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "n=int(input())\n",
        "list2=list(map(int,input().split()))\n",
        "h=0\n",
        "l=0\n",
        "\n",
        "for i in range(n-1):\n",
        "    if list2[i]<list2[i+1]:\n",
        "        h+=1\n",
        "    elif list2[i]>list2[i+1]:\n",
        "        l+=1\n",
        "\n",
        "\n",
        "\n",
        "print(h)\n",
        "print(l)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QSoaS-VrvvPe",
        "outputId": "57174848-4680-4f29-d883-75beb5c5a94f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n",
            "1 4 2 2 3 5 3 4\n",
            "4\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m=int(input())\n",
        "n=int(input())\n",
        "list1=[]\n",
        "list2=[]\n",
        "\n",
        "for i in range(m):\n",
        "  list1=list(map(int,input().split()))\n",
        "  list2="
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 147
        },
        "id": "0oU7C0Yr0AeO",
        "outputId": "38533faf-5852-481d-e670-888f2f9b9f29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-15-ef51e47c1a6d>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    list2=\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input())\n",
        "l=list(map(int,input().split()))\n",
        "\n",
        "x=0\n",
        "y=0\n",
        "\n",
        "n=len(l)-1\n",
        "for i in range(n):\n",
        "  a=l[i]\n",
        "  b=l[i+1]\n",
        "\n",
        "  if a>b:\n",
        "    x+=1\n",
        "  elif a<b:\n",
        "    y+=1\n",
        "\n",
        "print(y)\n",
        "print(x)"
      ],
      "metadata": {
        "id": "LJOmBsR50AFT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fbaed9d6-ed7c-4798-a618-516513524bc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n",
            "1 4 2 2 3 5 3 4\n",
            "4\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l=list(map(int,input().split()))\n",
        "n=len(l)\n",
        "m=0\n",
        "\n",
        "for i in range(n):\n",
        "  if l[i]==0:\n",
        "    m+=1\n",
        "  else:\n",
        "    print(l[i],\" \",sep=\"\",end=\"\")\n",
        "\n",
        "for j in range(m):\n",
        "  print(\"0 \",sep=\"\",end=\"\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EOlQ_k65P-Xi",
        "outputId": "4e20b9f9-0eb1-412a-d1ad-d23107a46397"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98122 98114 98001 98008 0 98013 0 98028\n",
            "98122 98114 98001 98008 98013 98028 0 0 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ErGU5eZKbeNl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 二維list"
      ],
      "metadata": {
        "id": "hnY15Eu4XOek"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# while\n",
        "\n",
        "while 符合的情形:\n",
        "\n",
        "  statment1…"
      ],
      "metadata": {
        "id": "GzScKuAyJIsA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=int(input())\n",
        "sum=0\n",
        "\n",
        "while a!=0:\n",
        "  sum=sum+(a%10)\n",
        "  a=int(a/10)\n",
        "  #print(a,end=\" \")\n",
        "\n",
        "print(sum)"
      ],
      "metadata": {
        "id": "uZyyFzMjF3ga",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4960bd96-269d-4c01-ffc4-02d2bbc747b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1235\n",
            "11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k=int(input())\n",
        "sum=0\n",
        "flag=0\n",
        "\n",
        "while sum<k:\n",
        "  flag+=1\n",
        "  sum+=(1/flag)\n",
        "\n",
        "print(flag)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vuEOjOZDJXn6",
        "outputId": "e0e2e990-10fc-4b31-e33b-a3a422fb6408"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n",
            "31\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "flag=0\n",
        "p=0\n",
        "f=0\n",
        "sum=0\n",
        "sum2=0\n",
        "n=0\n",
        "\n",
        "while flag!=1:\n",
        "  try:\n",
        "    s=float(input())\n",
        "\n",
        "    if s>=60:\n",
        "      p+=1\n",
        "    else:\n",
        "      f+=1\n",
        "\n",
        "    sum+=s\n",
        "    sum2+=(s**2)\n",
        "    n+=1\n",
        "\n",
        "  except EOFError:\n",
        "    flag=1\n",
        "\n",
        "print(p)\n",
        "print(f)\n",
        "avg=sum/n\n",
        "print(\"{0:0.2f}\".format(avg))\n",
        "\n",
        "d2=sum2/n-avg**2\n",
        "d=d2**0.5\n",
        "print(\"{0:0.2f}\".format(d))"
      ],
      "metadata": {
        "id": "kPltX_y5KG9D",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "112d408a-d0f9-4b1b-f43b-2baa4be13787"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "66\n",
            "12\n",
            "34\n",
            "100\n",
            "88\n",
            "90\n",
            "\u0004\n",
            "4\n",
            "2\n",
            "65.00\n",
            "32.02\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m=int(input())\n",
        "n=0\n",
        "sum=0\n",
        "\n",
        "while sum<m:\n",
        "  n+=1\n",
        "  sum+=n\n",
        "\n",
        "print(n)"
      ],
      "metadata": {
        "id": "1j8qhhSdTfN6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ac100f7-f82f-4c05-b56f-8abec46a7a15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n",
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input())\n",
        "c=0\n",
        "r=0\n",
        "flag=0\n",
        "\n",
        "while flag!=1:\n",
        "    c+=1\n",
        "\n",
        "    while n!=0:\n",
        "        r=r+((n%10)**2)\n",
        "        n=int(n/10)\n",
        "\n",
        "    print(r)\n",
        "    n=r\n",
        "    r=0\n",
        "\n",
        "    if n==1:\n",
        "        flag=1\n",
        "        print(\"Happy\")\n",
        "\n",
        "    elif c==30 and n!=1:\n",
        "        print(\"unhappy\")\n",
        "        break\n"
      ],
      "metadata": {
        "id": "QR3Dm-xm8x0P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "flag=0\n",
        "\n",
        "while flag==0:\n",
        "  try:\n",
        "    i,j=input().split()\n",
        "    i=int(i)\n",
        "    j=int(j)\n",
        "    cy=0\n",
        "\n",
        "    if i>j:\n",
        "      a=j\n",
        "      b=i\n",
        "    else:\n",
        "      a=i\n",
        "      b=j\n",
        "\n",
        "    for x in range(a,b+1):\n",
        "      n=x\n",
        "      c=1\n",
        "\n",
        "      while n!=1:\n",
        "        if n%2==1:\n",
        "          n=n*3+1\n",
        "          c+=1\n",
        "\n",
        "        elif n%2==0:\n",
        "          n=n/2\n",
        "          c+=1\n",
        "\n",
        "      if c>cy:\n",
        "        cy=c\n",
        "\n",
        "    print(i,j,cy)\n",
        "\n",
        "  except:\n",
        "    flag=1\n",
        "\n"
      ],
      "metadata": {
        "id": "DLAw9l5eEaSg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 二分搜\n",
        "\n",
        "1 2 3 4 5 **6** 7 8 9\n",
        "\n",
        "範圍長度：(1+9)-1 (=9)\n",
        "\n",
        "取值：\n",
        "\n",
        "ans>mid則範圍為mid**+1**~max\n",
        "\n",
        "(Ex: mid=5,mid<ans,故新範圍為6~9)"
      ],
      "metadata": {
        "id": "URysISTCCWPr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a,b,ans=input().split()\n",
        "\n",
        "a=int(a)\n",
        "b=int(b)\n",
        "ans=int(ans)\n",
        "mid=-1\n",
        "flag=0\n",
        "\n",
        "while mid!=ans:\n",
        "  flag+=1\n",
        "  mid=int((a+b)/2)\n",
        "\n",
        "\n",
        "  print(flag,\": \",mid,sep=\"\")\n",
        "\n",
        "  if ans>mid:\n",
        "    a=mid+1\n",
        "  elif ans<mid:\n",
        "    b=mid-1\n"
      ],
      "metadata": {
        "id": "TNg7dMOHKHFc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75884f65-7864-49c8-c32b-7d6ce1edbe90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 1000 888\n",
            "1: 500\n",
            "2: 750\n",
            "3: 875\n",
            "4: 938\n",
            "5: 906\n",
            "6: 890\n",
            "7: 882\n",
            "8: 886\n",
            "9: 888\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ADgJwbPpOYOt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=int(input())\n",
        "a1=a\n",
        "p=0\n",
        "q=0\n",
        "t=0\n",
        "sum1=0\n",
        "sum2=0\n",
        "\n",
        "\n",
        "while p!=1:\n",
        "\n",
        "    if a!=0:\n",
        "        a=int(a/10)\n",
        "        q+=1\n",
        "    else:\n",
        "        p=1\n",
        "\n",
        "#print(q)\n",
        "for i in range(1,q+1):\n",
        "    if i%2==0:\n",
        "        sum2+=(a1%10)\n",
        "        a1=int(a1/10)\n",
        "\n",
        "    else:\n",
        "        sum1+=(a1%10)\n",
        "        a1=int(a1/10)\n",
        "\n",
        "\n",
        "if sum1>sum2:\n",
        "    ans=sum1-sum2\n",
        "else:\n",
        "    ans=sum2-sum1\n",
        "\n",
        "print(ans)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UwISLAf9P2tP",
        "outputId": "3a29143f-dd07-4a97-c33d-e322fe4cfd62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "210\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x,y=input().split()\n",
        "x=int(x)\n",
        "y=int(y)\n",
        "ans=x+y\n",
        "print(ans)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eaoJoiPpcnXQ",
        "outputId": "af803759-711b-4f5c-fcf1-575712402b69"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1234 8253\n",
            "9487\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=int(input())\n",
        "n=0\n",
        "i=0\n",
        "\n",
        "while True:\n",
        "    i+=1\n",
        "    n+=i*4\n",
        "\n",
        "    if n>x:\n",
        "        n-=i*4\n",
        "        break\n",
        "\n",
        "y=(x-n)/i\n",
        "\n",
        "if y<1:\n",
        "    print(\"Pen\")\n",
        "elif y<2:\n",
        "    print(\"Pineapple\")\n",
        "elif y<3:\n",
        "    print(\"Apple\")\n",
        "else:\n",
        "    print(\"Pineapple Pen\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RcvpGaITLzbo",
        "outputId": "57c18ee1-4048-43c6-e8ae-5748a95f3e8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "87\n",
            "87 7 3 0.42857142857142855\n",
            "Pen\n"
          ]
        }
      ]
    }
  ]
}
